1.MySQL8.0 innodb threads
/** Structure which keeps shared future objects for InnoDB background
threads. One should use these objects to check if threads exited. */
struct Srv_threads {}

2.buf resize thread.
2497 /** This is the thread for resizing buffer pool. It waits for an event and
2498 when waked up either performs a resizing and sleeps again. */
2499 void buf_resize_thread() {
2500   while (srv_shutdown_state.load() == SRV_SHUTDOWN_NONE) {
2501     os_event_wait(srv_buf_resize_event);
2502     os_event_reset(srv_buf_resize_event);
2503     
2504     if (srv_shutdown_state.load() != SRV_SHUTDOWN_NONE) {
2505       break;
2506     }
2507     
2508     os_rmb;
2509     if (srv_buf_pool_old_size == srv_buf_pool_size) {
2510       std::ostringstream sout;
2511       sout << "Size did not change (old size = new size = " << srv_buf_pool_size
2512            << ". Nothing to do.";
2513       buf_resize_status("%s", sout.str().c_str());
2514     
2515       /* nothing to do */
2516       continue;
2517     }
2518     
2519     buf_pool_resize();
2520   } 
2521 }

3.page cleaner thread
static void buf_flush_page_cleaner_thread() {
#ifdef UNIV_LINUX          
  /* linux might be able to set different setting for each thread
  worth to try to set high priority for page cleaner threads */
  if (buf_flush_page_cleaner_set_priority(buf_flush_page_cleaner_priority)) {
    ib::info(ER_IB_MSG_129)
        << "page_cleaner worker priority: " << buf_flush_page_cleaner_priority;
  }                        
#endif /* UNIV_LINUX */                                                                                                                                                                         
                           
  for (;;) {               
    os_event_wait(page_cleaner->is_requested);
                           
    ut_d(buf_flush_page_cleaner_disabled_loop());
                           
    if (!page_cleaner->is_running) {
      break;               
    }                      
                           
    pc_flush_slot();   
  }                        
}     

4.buf_page_get