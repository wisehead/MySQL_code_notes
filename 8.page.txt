1.page_mem_alloc
首先检查PAGE_FREE指向的页空闲空间，若申请的空间小于等于此空间容量时，那么使用该空闲空间。否则，从PAGE_HEAP_TOP指向的空闲空间进行分配。

2.btr_page_reorganize_low
Innodb在页空间不足时，首先会调用该函数进行页的重新组织。即根据页中记录主键的顺序重新进行整理，这样就能整理出这些碎片的空间。

3.page_create
初始化一个page。

4.page_move_rec_list_start
将移动页中的记录到新页。移动页中第一个用户记录rec到指定的页，

5.page_move_rec_list_struct
从记录rec位置处以及之后的所有的记录移动到新页中。
在移动记录到新页的过程中，都需要更新锁、page header中PAGE_MAX_TRX_ID的值以及对应的自适应哈希索引。
这两个函数主要用于B+树的分裂。

6.page_dir_split_slot
和 page_dir_balance_slot用来保证每个槽槽所包含的记录在4~8之间。

若超出范围，则调用page_dir_split_slot进行split操作，产生新的slot

7.page_dir_balance_slot
若低于上述定义，则调用本函数来平衡各个slot中的记录，这可能会导致删除slot，也可能会对邻居slot进行合并操作。


8.page_cur_search_with_match
通过查询记录tuple来定位页中的记录，并通过变量cursor进行返回。
与此同时，
iup_matched_fields,

iup_matched_bytes,

ilow_matched_fields,

ilow_matched_bytes,

用来返回进行二叉树查找时，左右已经匹配的字段数量和字节数。


9.cmp_dtuple_rec_with_match
查询记录同页中记录的比较。

10.page_cur_open_on_rnd_user_rec
随机定位页中的某个记录，这用于统计索引的cardinality

11.page_cur_insert_rec_low
用来插入记录，记录可以是物理记录也可以是逻辑记录，通常是逻辑记录。变量tuple为插入的逻辑记录，插入时首先将其转化为物理记录。变量cursor指向插入记录之前的记录。

12.page_cur_insert_rec_write_log
page_cur_insert_rec_low被调用的同时，通过上面的函数将改变写入redo log。

13.page_copy_rec_list_*
插入的记录是物理记录。这是因为，这些操作是对页中已经存在的记录进行重整。在该函数中，将redo log type定义为 MTR_LOG_SHORT_INSERTS。这可以理解为一种较快速的插入。其和MTR_LOG_INSERT不同之处在于不需要在redo log中保存cursor指向记录的偏移量，因为这是将页中的所有记录插入到新页中的。


14.page_cur_delete_rec
将变量cursor指向的物理记录彻底删除。这里不是将delete_flag置为1，而是真正将记录删除。将记录所占用的空间放入page_header的PAGE_FREE列表的首端。
同时更新PAGE_N_REC，PAGE_GARBAGE，PAGE_LAST_INSERT。
需要注意的是，删除记录后，PAGE_LAST_INSERT的值更新为0x00。

同插入一样，删除操作完成后，还需要对page directory进行维护。
















